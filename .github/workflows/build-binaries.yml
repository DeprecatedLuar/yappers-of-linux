name: Build Binaries

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # ============================================================
      # CONFIGURATION
      # ============================================================
      BINARY_NAME: "yap"                              
      GO_MODULE_PATH: "yappers-of-linux"              # Your go.mod module name
      VERSION_VAR_PATH: "internal/commands.Version"   # Path to version variable (e.g., "internal/version.Version")
      MAIN_GO_FILE: "cmd/main.go"                     # Path to main.go entry point
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'

    - name: Build binaries
      id: build
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        LDFLAGS="-X ${GO_MODULE_PATH}/${VERSION_VAR_PATH}=${VERSION}"

        # ============================================================
        # BUILD TARGETS: Uncomment/comment platforms as needed
        # ============================================================

        # Linux (default - always included)
        GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o ${BINARY_NAME}-linux-amd64 ${MAIN_GO_FILE}
        GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o ${BINARY_NAME}-linux-arm64 ${MAIN_GO_FILE}
        FILES="${BINARY_NAME}-linux-amd64,${BINARY_NAME}-linux-arm64"

        # macOS (uncomment to build for Darwin)
        # GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o ${BINARY_NAME}-darwin-amd64 ${MAIN_GO_FILE}
        # GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o ${BINARY_NAME}-darwin-arm64 ${MAIN_GO_FILE}
        # FILES="${FILES},${BINARY_NAME}-darwin-amd64,${BINARY_NAME}-darwin-arm64"

        # Windows (uncomment to build for Windows)
        # GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o ${BINARY_NAME}-windows-amd64.exe ${MAIN_GO_FILE}
        # GOOS=windows GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o ${BINARY_NAME}-windows-arm64.exe ${MAIN_GO_FILE}
        # FILES="${FILES},${BINARY_NAME}-windows-amd64.exe,${BINARY_NAME}-windows-arm64.exe"

        # Set output for release step
        echo "files=${FILES}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.build.outputs.files }}
        generate_release_notes: true
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}

    # ============================================================
    # HOMEBREW TAP (optional): Uncomment to auto-update Homebrew formula
    # Requirements:
    #   1. Create a TAP_UPDATE_TOKEN secret in repo settings
    #   2. Update the tap repo URL and formula name below
    #   3. Ensure macOS/Linux builds are enabled above
    # ============================================================
    # - name: Update Homebrew tap
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.TAP_UPDATE_TOKEN }}
    #   run: |
    #     VERSION=${GITHUB_REF#refs/tags/}
    #     VERSION_NO_V="${VERSION#v}"
    #
    #     # Calculate sha256 from already-built binaries
    #     SHA_DARWIN_ARM64=$(shasum -a 256 ${BINARY_NAME}-darwin-arm64 | cut -d' ' -f1)
    #     SHA_DARWIN_AMD64=$(shasum -a 256 ${BINARY_NAME}-darwin-amd64 | cut -d' ' -f1)
    #     SHA_LINUX_ARM64=$(shasum -a 256 ${BINARY_NAME}-linux-arm64 | cut -d' ' -f1)
    #     SHA_LINUX_AMD64=$(shasum -a 256 ${BINARY_NAME}-linux-amd64 | cut -d' ' -f1)
    #
    #     echo "Checksums calculated for ${VERSION}"
    #
    #     # Clone tap repo (CHANGE REPO URL HERE)
    #     git clone https://x-access-token:${GITHUB_TOKEN}@github.com/DeprecatedLuar/homebrew-tap.git
    #     cd homebrew-tap/Formula
    #
    #     # Update formula (CHANGE FORMULA NAME AND DETAILS HERE)
    #     cat > ${BINARY_NAME}.rb <<'EOF'
    #     class ${BINARY_NAME^} < Formula
    #       desc "Your tool description here"
    #       homepage "https://github.com/DeprecatedLuar/${BINARY_NAME}"
    #       version "VERSION_NO_V_PLACEHOLDER"
    #       license "MIT"
    #
    #       on_macos do
    #         if Hardware::CPU.arm?
    #           url "https://github.com/DeprecatedLuar/REPO_NAME/releases/download/VERSION_PLACEHOLDER/${BINARY_NAME}-darwin-arm64"
    #           sha256 "SHA_DARWIN_ARM64_PLACEHOLDER"
    #         else
    #           url "https://github.com/DeprecatedLuar/REPO_NAME/releases/download/VERSION_PLACEHOLDER/${BINARY_NAME}-darwin-amd64"
    #           sha256 "SHA_DARWIN_AMD64_PLACEHOLDER"
    #         end
    #       end
    #
    #       on_linux do
    #         if Hardware::CPU.arm?
    #           url "https://github.com/DeprecatedLuar/REPO_NAME/releases/download/VERSION_PLACEHOLDER/${BINARY_NAME}-linux-arm64"
    #           sha256 "SHA_LINUX_ARM64_PLACEHOLDER"
    #         else
    #           url "https://github.com/DeprecatedLuar/REPO_NAME/releases/download/VERSION_PLACEHOLDER/${BINARY_NAME}-linux-amd64"
    #           sha256 "SHA_LINUX_AMD64_PLACEHOLDER"
    #         end
    #       end
    #
    #       def install
    #         bin.install "${BINARY_NAME}-darwin-arm64" => "${BINARY_NAME}" if OS.mac? && Hardware::CPU.arm?
    #         bin.install "${BINARY_NAME}-darwin-amd64" => "${BINARY_NAME}" if OS.mac? && Hardware::CPU.intel?
    #         bin.install "${BINARY_NAME}-linux-arm64" => "${BINARY_NAME}" if OS.linux? && Hardware::CPU.arm?
    #         bin.install "${BINARY_NAME}-linux-amd64" => "${BINARY_NAME}" if OS.linux? && Hardware::CPU.intel?
    #       end
    #
    #       test do
    #         assert_match "v#{version}", shell_output("#{bin}/${BINARY_NAME} version")
    #       end
    #     end
    #     EOF
    #
    #     # Replace placeholders
    #     sed -i "s/VERSION_NO_V_PLACEHOLDER/${VERSION_NO_V}/g" ${BINARY_NAME}.rb
    #     sed -i "s/VERSION_PLACEHOLDER/${VERSION}/g" ${BINARY_NAME}.rb
    #     sed -i "s/SHA_DARWIN_ARM64_PLACEHOLDER/${SHA_DARWIN_ARM64}/g" ${BINARY_NAME}.rb
    #     sed -i "s/SHA_DARWIN_AMD64_PLACEHOLDER/${SHA_DARWIN_AMD64}/g" ${BINARY_NAME}.rb
    #     sed -i "s/SHA_LINUX_ARM64_PLACEHOLDER/${SHA_LINUX_ARM64}/g" ${BINARY_NAME}.rb
    #     sed -i "s/SHA_LINUX_AMD64_PLACEHOLDER/${SHA_LINUX_AMD64}/g" ${BINARY_NAME}.rb
    #
    #     # Commit and push
    #     git config user.name "github-actions[bot]"
    #     git config user.email "github-actions[bot]@users.noreply.github.com"
    #     git add ${BINARY_NAME}.rb
    #     git commit -m "Auto-update formula to ${VERSION}" || exit 0
    #     git push
    #
    #     echo "âœ… Homebrew formula updated to ${VERSION}"